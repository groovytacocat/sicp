#lang racket
#|
Exercise 1.9
Each of the following two procedures defines a method for adding two positive integeres in terms of the preocedures inc, which increments its argument by 1,
and dec, which decrements its argument by 1

(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5).
Are these processes iterative or recursive
|#

#|
First:
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
This process is recursive

Second:
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
This process is iterative
|#

#|
Exercise 1.10
The following procedure computes a mathematical function called Ackermann's function

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1)))))))

What are the values of the following expressions?
(A 1 10)
(A 2 4)
(A 3 3)

Consider the following procedures, where A is the procedure defined above:
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n^2
|#

#|
(A 1 10) -> 1024
(A 2 4) -> 65536
(A 3 3) -> 65536

f(n) = 2n
g(n) = 2^n
h(n) = 2^h(n-1)
|#

#|
Exercise 1.11
A function f is defined by the rule that f(n) = n if n < 3 and f(n) = f(n-1) + 2f(n-2) + 3f(n-3) if n >= 3.
Write a procedure that coputes f by means of a recursive process. Write a procedure that computes f by means of an iterative process
|#

; Recursive
(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
         (* 2
            (f (- n 2)))
         (* 3
            (f (- n 3))))))

; Iterative
(define (f-iter n)
  (define (iter a b c count)
    (if (= count 0)
        c
        (iter (+ a
                 (* 2 b)
                 (* 3 c))
              a
              b
              (- count 1))))
  (iter 2 1 0 n))

#|
Exercise 1.12
Write a procedure that computes elements of Pascal's triangle by means of a recursive process
|#

(define (pascal row col)
  (if (or (= col row) (= col 0))
      1
      (+ (pascal (- row 1)
                 col)
         (pascal (- row 1)
                 (- col 1)))))