#lang racket
(define (square x) (* x x))
(define (abs x) (if (< x 0) (- x) x))
(define (even? x) (= (remainder x 2) 0))
(define (double n) (* 2 n))
(define (halve n) (/ n 2))
#|
Exercise 1.9
Each of the following two procedures defines a method for adding two positive integeres in terms of the preocedures inc, which increments its argument by 1,
and dec, which decrements its argument by 1

(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5).
Are these processes iterative or recursive
|#

#|
First:
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
This process is recursive

Second:
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
This process is iterative
|#

#|
Exercise 1.10
The following procedure computes a mathematical function called Ackermann's function

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1)))))))

What are the values of the following expressions?
(A 1 10)
(A 2 4)
(A 3 3)

Consider the following procedures, where A is the procedure defined above:
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))

Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n^2
|#

#|
(A 1 10) -> 1024
(A 2 4) -> 65536
(A 3 3) -> 65536

f(n) = 2n
g(n) = 2^n
h(n) = 2^h(n-1)
|#

#|
Exercise 1.11
A function f is defined by the rule that f(n) = n if n < 3 and f(n) = f(n-1) + 2f(n-2) + 3f(n-3) if n >= 3.
Write a procedure that coputes f by means of a recursive process. Write a procedure that computes f by means of an iterative process
|#

; Recursive
(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1))
         (* 2
            (f (- n 2)))
         (* 3
            (f (- n 3))))))

; Iterative
(define (f-iter n)
  (define (iter a b c count)
    (if (= count 0)
        c
        (iter (+ a
                 (* 2 b)
                 (* 3 c))
              a
              b
              (- count 1))))
  (iter 2 1 0 n))

#|
Exercise 1.12
Write a procedure that computes elements of Pascal's triangle by means of a recursive process
|#

(define (pascal n)
  (define (pascal-iter i j)
    (define (pascal-elem row col)
      (if (or (= col row) (= col 0))
          1
          (+ (pascal-elem (- row 1)
                          col)
             (pascal-elem (- row 1)
                          (- col 1)))))
    (cond [(<= i n)
           (cond [(<= j i)
                  (display (pascal-elem i j))
                  (display "\t")
                  (pascal-iter i (+ j 1))]
                 [(newline)
                  (pascal-iter (+ i 1) 0)])]))
  (pascal-iter 0 0))

#|
Exercise 1.15
The sine of an angle (in radians) can be copmuted by making use of the approximation sin(x) ~ x if x is sufficiently small, and the trig identity

sin(x) = 3 sin(x/3) - 4 sin^3 (x/3)

to reduce the size of the argument of sin. (For this exercise an angle is considered "sufficiently small" if its magnitude is not greater than 0.1 radians)
These ideas are incorporated into the following procedures
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

a. How many times is the procedure p applied when (sine 12.15) is evaluated?
b. What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?

|#

#|
a. p is evaluated 5 times. My initial assumption was that p would be evaluated 3 times, since the angle is divided by 3 I assumed it would happen log_3(angle) number of times, however I was not taking into consideration the fact that it would need to perform the division by 3 until it was < 0.1
(sine 12.15)
(p (sine (4.05)))
(p (p (sine (1.35))))
(p (p (p (sine (0.45)))))
(p (p (p (p (sine (0.15))))))
(p (p (p (p (p (sine (0.05)))))))
|#

#|
b. This process's order of growth is Theta(log(a)) for both time and space. The space is due to being a recursive process so the stack grows proportional to the number of steps being executed.
The time complexity for this is log(a) as p is evaluated a number of times n that satisfies (a / 3^n ) < 0.1 -> n > log_3()
|#


#|
Exercise 1.16
Designa  procedure that evolves an iterative exponentiation process that uses successive squaring.
(Hint: Using the observation that (b^n/2)^2 = (b^2)^n/2, keep, along with the exponent n and the base b, and additional state variable a, and define the state transformation in such a way that the product a * b^n is unchanged from state to state.
      At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process. In general, the technique of defining an invariant quantity that remains unchanged from state to state is a powerful
      way to think about the design of iterative algorithms)
|#

(define (fast-expt-iter b n)
  (define (exp-iter a b n)
    (cond [(= n 0) a]
          [(even? n) (exp-iter a (square b) (/ n 2))]
          [else (exp-iter (* a b) b (- n 1))]))
  (exp-iter 1 b n))

#|
Exercise 1.17
The Exponentiation algorithm in this section are based on performing exponentiation y means of repeated multiplication. In a similar way, one can perform integer multiplication by means of repeated addition.
The following multiplication procedure (in which it is assumed that our language can only add, not multiply) is analogous to the expt procedure

(define (* a b)
  (if (= b 0)
      0
      (+ a (* a (- b)))))

This algorithm takes a number of steps that is linear in b. Now suppose we include, together with addition, operations double, which doubles an integer, and halve which divides an (even) integer by 2.
Using thse design a multiplication procedure analogous to fast-expt that uses a logarithmic number of steps
|#

(define (fast-mult a b)
  (cond [(= b 0)
         0]
        [(even? b)
         (fast-mult (double a) (halve b))]
        [else
         (+ a (fast-mult a (- b 1)))]))

#|
Exercsise 1.18
Using the results of exercises 1.16 and 1.17, devise a procedure that generates an iterative process or multiplying 2 integers in terms of adding, doubling, and halving and uses a logarithmic number of steps
|#

(define (fast-mult-iter a b)
  (define (fast-iter a b prod)
    (cond [(= b 0)
           prod]
          [(even? b)
           (fast-iter (double a) (halve b) prod)]
          [else
           (fast-iter a (- b 1) (+ prod a))]))
  (fast-iter a b 0))

#|
Exercise 1.19
a = a + b, and b = a is called the transformation T. Observe that applying T repeatedly n times starting with 1 and 0, produces the pair Fib(n+1) and Fib(n).
In other words the Fibonacci numbers are produced by applying T^n, the nth power of transformation T starting with the pair (1, 0). Now consider T to be the special case of p = 0 and q = 1in a family of transformations T_pq where T_pq transforms (a,b) according to:
a = b*q + a*q + a*p and b = b*p + a*q.

Show that if we apply such a transformation T_pq twice, the effect is the same as using a single transformation T_p'q' of the same form, and compute p' and q' in terms of p and q
|#
(define (fib n)
  (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
  (cond [(= count 0)
         b]
        [(even? count)
         (fib-iter a
                       b
                       (+ (square p) (square q))
                       (+ (square q) (* 2 p q))
                       (/ count 2))]
        [else (fib-iter (+ (* b q) (* a q) (* a p))
                            (+ (* b p) (* a q))
                            p
                            q
                            (- count 1))]))

#|
Exercise 1.20
Process generated by procedures depends on interpreter rules. Suppose we were to itnerpret this procedure using normal-order evaluation. 
Using the subsitution method (for normal order), illustrate the process generated in evaluating (gcd 206 40) and indicate the remainder operations that are actually performed.

How many remainder operations are actually performed in the normal-order evaluation of (gc 206 40)? In the applicative order evaluation?
|#

; Applicative Order - remainder is evaluated 4 times. 
; Normal Order evaluation - remainder is evalauted 18 times. (too much paper space wasted doing all this and I want to type it out even less)

